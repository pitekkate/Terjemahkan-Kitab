# Nama Workflow
name: Terjemahkan Gambar Manuskrip

# Pemicu:
# 1. Jalankan otomatis saat ada file .png baru di folder 'manuskrip/' di branch `alfatawi`
# 2. Jalankan manual via GitHub UI/API
on:
  push:
    branches:
      - alfatawi
    paths:
      - 'manuskrip/**.png'
  workflow_dispatch:
    inputs:
      image_file:
        type: string
        description: 'Path file gambar (contoh: manuskrip/halaman1.png)'
        default: 'manuskrip/*.png'

jobs:
  read-and-translate:
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Langkah 2: Instalasi ImageMagick & Tesseract
      - name: Install Dependencies (ImageMagick & Tesseract)
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick tesseract-ocr tesseract-ocr-ara tesseract-ocr-eng

      # Langkah 3: Cari file .png (otomatis atau manual)
      - name: Find Image File
        id: find_image
        run: |
          IMAGE_FILE="${{ github.event.inputs.image_file }}"
          if [ -z "$IMAGE_FILE" ]; then
            IMAGE_FILE=$(find manuskrip -type f -name "*.png" | head -n 1)
          fi
          if [ -z "$IMAGE_FILE" ]; then
            echo "❌ Tidak ada file .png ditemukan di folder manuskrip/"
            exit 1
          fi
          echo "image_path=$IMAGE_FILE" >> $GITHUB_OUTPUT

      # Langkah 4: Debugging - Periksa file yang terdeteksi
      - name: Debug Git Diff
        run: |
          echo "🔍 Memeriksa file yang diubah di commit ini:"
          git diff-tree --no-commit-id --name-only -r ${{ github.sha }}

      # Langkah 5: OCR dengan Tesseract (gambar utuh)
      - name: Run OCR on Full Image
        run: |
          tesseract "${{ steps.find_image.outputs.image_path }}" hasil_ocr -l ara+eng

      # Langkah 6: Validasi Output OCR
      - name: Validate OCR Output
        run: |
          if [ ! -s hasil_ocr.txt ]; then
            echo "❌ Hasil OCR kosong atau tidak ada!"
            exit 1
          fi

      # Langkah 7: Debugging - Periksa isi file OCR
      - name: Debug OCR File
        run: |
          echo "📄 Isi hasil_ocr.txt:"
          cat hasil_ocr.txt

      # Langkah 8: Setup Node.js dan instalasi google-translate-api
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install google-translate-api
        run: |
          npm install --save google-translate-api

      # Langkah 9: Buat skrip terjemahan yang robust
      - name: Create Robust Translate Script
        run: |
          echo "const fs = require('fs'); const translate = require('google-translate-api'); const text = fs.readFileSync(process.argv[2], 'utf-8'); if (!text.trim()) { console.log('⚠️ Teks kosong, lewati terjemahan'); fs.writeFileSync(process.argv[4], '[Tidak ada teks untuk diterjemahkan]'); } else { translate(text, { to: process.argv[3] }).then(res => { console.log(res.text); fs.writeFileSync(process.argv[4], res.text); }).catch(err => { console.error('❌ Terjadi kesalahan:', err); fs.writeFileSync(process.argv[4], '[Terjemahan gagal]'); }); }" > translate.js

      # Langkah 10: Terjemahkan hasil OCR
      - name: Translate OCR Text
        run: |
          node translate.js hasil_ocr.txt id hasil_terjemahan.txt
          echo "✅ Terjemahan selesai."

      # Langkah 11: Validasi file terjemahan
      - name: Validate Translation File
        run: |
          if [ ! -f hasil_terjemahan.txt ]; then
            echo "❌ hasil_terjemahan.txt tidak ditemukan!"
            exit 1
          fi

      # Langkah 12: Debugging - Periksa isi file terjemahan
      - name: Debug Translation File
        run: |
          echo "📄 Isi hasil_terjemahan.txt:"
          cat hasil_terjemahan.txt

      # Langkah 13: Gabungkan hasil terjemahan ke file Markdown
      - name: Combine and Commit Results
        run: |
          ORIGINAL_FILENAME="${{ steps.find_image.outputs.image_path }}"
          FILENAME_NO_EXT=$(basename "$ORIGINAL_FILENAME" .png)
          OUTPUT_FILE="terjemahan/${FILENAME_NO_EXT}_terjemahan.md"
          mkdir -p terjemahan

          {
            echo "# Hasil Terjemahan untuk: ${ORIGINAL_FILENAME}"
            echo ""
            echo "---"
            echo "## Terjemahan"
            echo ""
            cat hasil_terjemahan.txt
          } > "$OUTPUT_FILE"

      # Langkah 14: Auto commit file hasil terjemahan
      - name: Auto Commit Translated File
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Bot: Menambahkan hasil terjemahan untuk file yang baru"
          file_pattern: "terjemahan/*.md"
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
